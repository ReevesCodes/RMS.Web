@* 
@model IEnumerable<RMS.Data.Entities.CartItem>

@{
    ViewData["Title"] = "Your Cart";
    var total = Model.Sum(i => i.Quantity * i.Product.Price);
}

<center><h1 class="sr-only">Shopping Cart</h1></center>

<div class="container mt-5" role="region" aria-label="Shopping cart area">
    <div class="card shadow-sm mx-auto" style="max-width: 800px;">
        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
            <h2 class="mb-0 fs-4" id="cartHeading" tabindex="0">Your Cart</h2>
            <span class="badge bg-light text-success fs-6" aria-live="polite" aria-atomic="true" aria-relevant="additions removals">
                @Model.Count() item@(Model.Count() == 1 ? "" : "s")
            </span>
        </div>
        <div class="card-body p-0">
            @if (!Model.Any())
            {
                <div class="alert alert-info m-4" role="alert" aria-live="polite">
                    Your cart is currently empty.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0" aria-describedby="cartHeading">
                        <thead class="table-light">
                            <tr>
                                <th scope="col" class="align-middle">Product</th>
                                <th scope="col" class="text-end align-middle">Price</th>
                                <th scope="col" class="text-center align-middle">Quantity</th>
                                <th scope="col" class="text-end align-middle">Total</th>
                                <th scope="col" class="text-center align-middle">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td class="align-middle">@item.Product.Name</td>
                                    <td class="text-end align-middle">@item.Product.Price.ToString("C")</td>
                                    <td class="text-center align-middle">@item.Quantity</td>
                                    <td class="text-end align-middle">@((item.Quantity * item.Product.Price).ToString("C"))</td>
                                    <td class="text-center align-middle">
                                        <form asp-action="RemoveFromCart" method="post" aria-label="Remove @item.Product.Name from cart" class="d-inline remove-form" data-product="@item.Product.Name.ToLower()">
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger remove-btn" aria-label="Remove @item.Product.Name">
                                                Remove
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center p-4 border-top">
                    <h4 class="mb-0" aria-live="polite" aria-atomic="true">Total: <strong>@total.ToString("C")</strong></h4>
                    <div>
                        <a href="/Shop" class="btn btn-outline-success me-2" aria-label="Continue shopping">Continue Shopping</a>
                        <a id="checkoutBtn" href="/Checkout" class="btn btn-success" aria-label="Proceed to checkout">Proceed to Checkout</a>
                    </div>
                </div>
            }
        </div>
    </div>
</div> 

@section Scripts {
<script>
const checkoutBtn = document.getElementById('checkoutBtn');
const removeForms = document.querySelectorAll('.remove-form');

function speak(text) {
    if (!text) return;
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = 'en-US';
    utter.volume = 1;
    utter.rate = 1;
    utter.pitch = 1;
    speechSynthesis.speak(utter);
}

// Map product names to forms
const productFormMap = {};
removeForms.forEach(form => {
    const product = form.dataset.product;
    productFormMap[product] = form;
});

// Speech Recognition
let recognition;
if ('webkitSpeechRecognition' in window) {
    recognition = new webkitSpeechRecognition();
    recognition.lang = 'en-US';
    recognition.continuous = true;
    recognition.interimResults = false;

    recognition.onstart = () => {
        speak("Voice control activated. Say checkout, continue shopping, or remove followed by product name.");
        console.log("ðŸŽ¤ Listening...");
    };

    recognition.onresult = (event) => {
        const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log("Heard:", transcript);

        if (transcript.includes("checkout") || transcript.includes("proceed to checkout")) {
            speak("Proceeding to checkout.");
            window.location.href = "/Checkout";
        } else if (transcript.includes("continue shopping")) {
            speak("Continuing shopping.");
            window.location.href = "/Shop";
        } else if (transcript.includes("remove ")) {
            // Get product name after "remove "
            const productName = transcript.replace("remove ", "").trim();
            if (productFormMap[productName]) {
                speak(`Removing ${productName} from cart.`);
                productFormMap[productName].submit();
            } else {
                speak(`Product ${productName} not found in your cart.`);
            }
        }
    };

    recognition.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
        speak("There was an error with voice recognition.");
    };

    recognition.onend = () => {
        console.log("ðŸŽ¤ Listening stopped. Restarting...");
        recognition.start(); // continuous listening
    };

    recognition.start();
} else {
    speak("Voice recognition not supported in this browser.");
}
</script>
}

 *@



@model IEnumerable<RMS.Data.Entities.CartItem>

@{
    ViewData["Title"] = "Your Cart";
    var total = Model.Sum(i => i.Quantity * i.Product.Price);
}

<center><h1 class="sr-only">Shopping Cart</h1></center>

<div class="container mt-5" role="region" aria-label="Shopping cart area">
    <div class="card shadow-sm mx-auto" style="max-width: 800px;">
        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
            <h2 class="mb-0 fs-4" id="cartHeading" tabindex="0">Your Cart</h2>
            <span class="badge bg-light text-success fs-6" aria-live="polite" aria-atomic="true" aria-relevant="additions removals">
                @Model.Count() item@(Model.Count() == 1 ? "" : "s")
            </span>
        </div>
        <div class="card-body p-0">
            @if (!Model.Any())
            {
                <div class="alert alert-info m-4" role="alert" aria-live="polite">
                    Your cart is currently empty.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0" aria-describedby="cartHeading">
                        <thead class="table-light">
                            <tr>
                                <th scope="col" class="align-middle">Product</th>
                                <th scope="col" class="text-end align-middle">Price</th>
                                <th scope="col" class="text-center align-middle">Quantity</th>
                                <th scope="col" class="text-end align-middle">Total</th>
                                <th scope="col" class="text-center align-middle">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td class="align-middle">@item.Product.Name</td>
                                    <td class="text-end align-middle">@item.Product.Price.ToString("C")</td>
                                    <td class="text-center align-middle">@item.Quantity</td>
                                    <td class="text-end align-middle">@((item.Quantity * item.Product.Price).ToString("C"))</td>
                                    <td class="text-center align-middle">
                                        <form asp-action="RemoveFromCart" method="post" aria-label="Remove @item.Product.Name from cart" class="d-inline remove-form" data-product="@item.Product.Name.ToLower()">
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger remove-btn" aria-label="Remove @item.Product.Name">
                                                Remove
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center p-4 border-top">
                    <h4 class="mb-0" aria-live="polite" aria-atomic="true">Total: <strong>@total.ToString("C")</strong></h4>
                    <div>
                        <a href="/Shop" class="btn btn-outline-success me-2" aria-label="Continue shopping">Continue Shopping</a>
                        <a id="checkoutBtn" href="/Checkout" class="btn btn-success" aria-label="Proceed to checkout">Proceed to Checkout</a>
                    </div>
                </div>
            }
        </div>
    </div>
</div> 

@section Scripts {
<script>
const checkoutBtn = document.getElementById('checkoutBtn');
const removeForms = document.querySelectorAll('.remove-form');

function speak(text) {
    if (!text) return;
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = 'en-US';
    utter.volume = 1;
    utter.rate = 1;
    utter.pitch = 1;
    speechSynthesis.speak(utter);
}

// Map product names to forms
const productFormMap = {};
removeForms.forEach(form => {
    const product = form.dataset.product;
    productFormMap[product] = form;
});

// Speech Recognition
let recognition;
if ('webkitSpeechRecognition' in window) {
    recognition = new webkitSpeechRecognition();
    recognition.lang = 'en-US';
    recognition.continuous = true;
    recognition.interimResults = false;

    recognition.onstart = () => {
        speak("Voice control activated. Say checkout, continue shopping, or remove followed by product name.");
        console.log("ðŸŽ¤ Listening...");
    };

    recognition.onresult = (event) => {
        const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log("Heard:", transcript);

        // Flexible matching for checkout
        if (/check\s*out/.test(transcript) || transcript.includes("proceed to checkout")) {
            speak("Proceeding to checkout.");
            window.location.href = "/Checkout";

        } else if (transcript.includes("continue shopping")) {
            speak("Continuing shopping.");
            window.location.href = "/Shop";

        } else if (transcript.includes("remove ")) {
            // Get product name after "remove "
            const productName = transcript.replace("remove ", "").trim();
            if (productFormMap[productName]) {
                speak(`Removing ${productName} from cart.`);
                productFormMap[productName].submit();
            } else {
                speak(`Product ${productName} not found in your cart.`);
            }
        }
    };

    recognition.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
        speak("There was an error with voice recognition.");
    };

    recognition.onend = () => {
        console.log("ðŸŽ¤ Listening stopped. Restarting...");
        recognition.start(); // continuous listening
    };

    recognition.start();
} else {
    speak("Voice recognition not supported in this browser.");
}
</script>
}
